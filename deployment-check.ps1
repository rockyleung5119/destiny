# ÈÉ®ÁΩ≤ÂâçÊ£ÄÊü•ËÑöÊú¨
Write-Host "üîç Checking deployment readiness..." -ForegroundColor Green
Write-Host ""

# Á°Æ‰øùÂú®Ê≠£Á°ÆÁöÑÁõÆÂΩï
if (Test-Path "backend") {
    Set-Location backend
}

Write-Host "üìç Current directory: $(Get-Location)" -ForegroundColor Yellow
Write-Host ""

# Ê£ÄÊü•wrangler.tomlËØ≠Ê≥ï
Write-Host "üìã Checking wrangler.toml syntax..." -ForegroundColor Cyan
try {
    wrangler config validate
    Write-Host "‚úÖ wrangler.toml syntax is valid" -ForegroundColor Green
} catch {
    Write-Host "‚ùå wrangler.toml syntax error: $($_.Exception.Message)" -ForegroundColor Red
}

Write-Host ""

# Ê£ÄÊü•TypeScriptÁºñËØë
Write-Host "üîß Checking TypeScript compilation..." -ForegroundColor Cyan
try {
    # ÁÆÄÂçïÁöÑËØ≠Ê≥ïÊ£ÄÊü•
    $content = Get-Content "worker.ts" -Raw
    if ($content -match "export\s+class\s+\w+") {
        Write-Host "‚úÖ TypeScript classes found" -ForegroundColor Green
    }
    if ($content -match "export\s+default") {
        Write-Host "‚úÖ Default export found" -ForegroundColor Green
    }
} catch {
    Write-Host "‚ùå TypeScript check failed: $($_.Exception.Message)" -ForegroundColor Red
}

Write-Host ""

# Ê£ÄÊü•ÁéØÂ¢ÉÂèòÈáè
Write-Host "üîë Checking environment variables..." -ForegroundColor Cyan
$requiredVars = @(
    "DEEPSEEK_API_KEY",
    "JWT_SECRET",
    "RESEND_API_KEY"
)

foreach ($var in $requiredVars) {
    try {
        $result = wrangler secret list | Select-String $var
        if ($result) {
            Write-Host "‚úÖ $var is set" -ForegroundColor Green
        } else {
            Write-Host "‚ö†Ô∏è $var may not be set" -ForegroundColor Yellow
        }
    } catch {
        Write-Host "‚ùå Failed to check $var" -ForegroundColor Red
    }
}

Write-Host ""

# Ê£ÄÊü•D1Êï∞ÊçÆÂ∫ì
Write-Host "üóÑÔ∏è Checking D1 database..." -ForegroundColor Cyan
try {
    wrangler d1 list | Select-String "destiny-db"
    Write-Host "‚úÖ D1 database found" -ForegroundColor Green
} catch {
    Write-Host "‚ùå D1 database check failed" -ForegroundColor Red
}

Write-Host ""

# Ê£ÄÊü•ÈÉ®ÁΩ≤ÂéÜÂè≤
Write-Host "üì¶ Checking deployment history..." -ForegroundColor Cyan
try {
    wrangler deployments list --limit 3
} catch {
    Write-Host "‚ùå Failed to get deployment history" -ForegroundColor Red
}

Write-Host ""

# Âª∫ËÆÆÁöÑÈÉ®ÁΩ≤Ê≠•È™§
Write-Host "üöÄ Recommended deployment steps:" -ForegroundColor Yellow
Write-Host "1. Fix any issues shown above"
Write-Host "2. Test locally: wrangler dev"
Write-Host "3. Deploy: wrangler deploy"
Write-Host "4. Verify: check /api/health endpoint"
Write-Host ""

# Ê£ÄÊü•Êú¨Âú∞ÂºÄÂèëÁéØÂ¢É
Write-Host "üß™ Testing local development..." -ForegroundColor Cyan
try {
    # ÂêØÂä®Êú¨Âú∞ÂºÄÂèëÊúçÂä°Âô®ËøõË°åÂø´ÈÄüÊµãËØï
    $job = Start-Job -ScriptBlock {
        Set-Location $args[0]
        wrangler dev --local=true --port=8788 2>&1
    } -ArgumentList (Get-Location)
    
    Start-Sleep -Seconds 10
    
    try {
        $response = Invoke-WebRequest -Uri "http://localhost:8788/api/health" -TimeoutSec 5
        if ($response.StatusCode -eq 200) {
            Write-Host "‚úÖ Local development server works" -ForegroundColor Green
        }
    } catch {
        Write-Host "‚ö†Ô∏è Local development server test failed" -ForegroundColor Yellow
    }
    
    Stop-Job $job -Force
    Remove-Job $job -Force
    
} catch {
    Write-Host "‚ùå Local development test failed" -ForegroundColor Red
}

Write-Host ""
Write-Host "üéØ Deployment check completed!" -ForegroundColor Green
