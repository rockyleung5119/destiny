# .github/workflows/deploy-backend.yml

name: Deploy Backend to Cloudflare Workers

on:
  # 当代码被推送到 main 分支时触发
  push:
    branches:
      - main
    # 暂时移除路径过滤，确保工作流能被触发
    # paths:
    #   - 'backend/**'
    #   - '.github/workflows/deploy-backend.yml'

  # 允许您在 GitHub Actions 页面手动触发此工作流
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest # 使用最新的 Ubuntu 运行环境
    name: Deploy Backend
    steps:
      - name: Checkout
        uses: actions/checkout@v4 # 第一步：拉取代码

      - name: Setup Node.js
        uses: actions/setup-node@v4 # 第二步：设置 Node.js 环境
        with:
          node-version: '20' # 使用 Node.js 20 版本

      - name: Prepare Backend
        run: |
          echo "🔧 Preparing backend for deployment..."
          cd backend
          
          # 检查必要文件
          echo "📋 Checking required files..."
          ls -la
          
          # 确保有正确的package.json
          if [ ! -f "package.json" ]; then
            if [ -f "workers-package.json" ]; then
              echo "📦 Using workers-package.json as package.json"
              cp workers-package.json package.json
            else
              echo "❌ No package.json found!"
              exit 1
            fi
          fi
          
          echo "📄 Package.json content:"
          cat package.json

      - name: Install Dependencies
        run: |
          cd backend
          echo "📦 Installing dependencies..."

          # 检查当前Node版本
          node --version
          npm --version

          # 清理可能的缓存问题
          rm -rf node_modules package-lock.json || true

          # 确保使用正确的package.json
          if [ ! -f "package.json" ]; then
            echo "❌ package.json not found!"
            exit 1
          fi

          # 安装依赖，使用更稳定的方式
          echo "Installing with npm install..."
          npm install --no-optional --no-audit

          echo "✅ Dependencies installed"
          echo "📊 Installed packages:"
          npm list --depth=0 || echo "Package list may have warnings, continuing..."

      - name: Validate Configuration
        run: |
          cd backend
          echo "🔍 Validating configuration..."
          
          # 检查TypeScript文件
          if [ -f "worker.ts" ]; then
            echo "✅ worker.ts found"
            echo "📊 Checking for Stripe integration..."
            grep -q "StripeAPIClient" worker.ts && echo "✅ Stripe API client found" || echo "⚠️ Stripe API client not found"
            grep -q "CloudflareStripeService" worker.ts && echo "✅ Stripe service found" || echo "⚠️ Stripe service not found"
          else
            echo "❌ worker.ts not found!"
            exit 1
          fi

      - name: Pre-deployment Resource Check
        run: |
          cd backend
          echo "🔍 Checking Cloudflare resources before deployment..."

          # 检查队列
          echo "📋 Checking queues..."
          wrangler queues list || echo "⚠️ Queue check failed, but continuing..."

          # 检查D1数据库
          echo "🗄️ Checking D1 database..."
          wrangler d1 list || echo "⚠️ D1 check failed, but continuing..."

          # 检查R2存储桶
          echo "📦 Checking R2 buckets..."
          wrangler r2 bucket list || echo "⚠️ R2 check failed, but continuing..."

          # 干运行测试 - 使用GitHub专用配置
          echo "🧪 Testing deployment configuration..."
          wrangler deploy --dry-run --config wrangler-github.toml
          echo "✅ Pre-deployment checks completed"
        env:
          CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}

      - name: Deploy to Cloudflare Workers (Attempt 1)
        id: deploy-attempt-1
        uses: cloudflare/wrangler-action@v3
        continue-on-error: true
        with:
          apiToken: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          accountId: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
          workingDirectory: 'backend'
          # 保持完整功能的部署命令，使用GitHub专用配置
          command: deploy --config wrangler-github.toml --compatibility-date=2024-08-01 --keep-vars --force

      - name: Deploy to Cloudflare Workers (Attempt 2 - Fallback)
        id: deploy-attempt-2
        if: steps.deploy-attempt-1.outcome == 'failure'
        uses: cloudflare/wrangler-action@v3
        continue-on-error: true
        with:
          apiToken: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          accountId: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
          workingDirectory: 'backend'
          # 备用部署：使用GitHub配置，不强制保留变量
          command: deploy --config wrangler-github.toml --compatibility-date=2024-08-01 --force

      - name: Deploy to Cloudflare Workers (Attempt 3 - Minimal)
        id: deploy-attempt-3
        if: steps.deploy-attempt-2.outcome == 'failure'
        uses: cloudflare/wrangler-action@v3
        with:
          apiToken: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          accountId: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
          workingDirectory: 'backend'
          # 最小化部署：只使用基本配置
          command: deploy --config wrangler-github.toml

      - name: Handle Deployment Failure
        if: failure()
        run: |
          echo "❌ 后端部署失败！"
          echo "🔍 可能的原因："
          echo "1. API Token权限不足"
          echo "2. Durable Objects或Queues配置问题"
          echo "3. 网络连接问题"
          echo "4. wrangler版本兼容性问题"
          echo ""
          echo "🛠️ 建议的修复方法："
          echo "1. 检查GitHub Secrets中的CLOUDFLARE_API_TOKEN权限"
          echo "2. 确保API Token包含Workers、Queues、D1、R2权限"
          echo "3. 手动部署: cd backend && wrangler deploy"
          echo "4. 检查Cloudflare账户是否有足够的配额"
          exit 1

      - name: Verify Deployment
        run: |
          echo "🧪 Verifying deployment..."
          sleep 15  # 等待部署完全生效

          # 测试健康检查端点
          echo "📊 Testing health endpoint..."
          HEALTH_RESPONSE=$(curl -s -o /dev/null -w "%{http_code}" https://destiny-backend.jerryliang5119.workers.dev/api/health)
          echo "Health response code: $HEALTH_RESPONSE"

          if [ "$HEALTH_RESPONSE" = "200" ]; then
            echo "✅ Health check passed"
          else
            echo "⚠️ Health check returned: $HEALTH_RESPONSE"
          fi

          # 测试Stripe健康检查端点
          echo "📊 Testing Stripe health endpoint..."
          STRIPE_HEALTH_RESPONSE=$(curl -s -o /dev/null -w "%{http_code}" https://destiny-backend.jerryliang5119.workers.dev/api/stripe/health)
          echo "Stripe health response code: $STRIPE_HEALTH_RESPONSE"

          if [ "$STRIPE_HEALTH_RESPONSE" = "200" ]; then
            echo "✅ Stripe health check passed"
          else
            echo "⚠️ Stripe health check returned: $STRIPE_HEALTH_RESPONSE"
          fi

          echo "✅ Deployment verification completed!"

      - name: Deployment Success
        run: |
          echo "🎉 Backend deployment completed successfully!"
          echo ""
          echo "🔗 Backend URL: https://destiny-backend.jerryliang5119.workers.dev"
          echo "🔗 Health Check: https://destiny-backend.jerryliang5119.workers.dev/api/health"
          echo "🔗 Stripe Health: https://destiny-backend.jerryliang5119.workers.dev/api/stripe/health"
          echo ""
          echo "📋 Next steps:"
          echo "1. Configure Stripe environment variables if needed"
          echo "2. Test payment endpoints"
          echo "3. Monitor application logs with: wrangler tail"
