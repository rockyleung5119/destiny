# .github/workflows/deploy-backend.yml

name: Deploy Backend to Cloudflare Workers

on:
  # 当代码被推送到 main 分支时触发
  push:
    branches:
      - main
    paths:
      - 'backend/**' # 仅当 backend 目录下的文件发生变化时才触发
      - '.github/workflows/deploy-backend.yml' # 工作流文件本身变化也触发

  # 允许您在 GitHub Actions 页面手动触发此工作流
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest # 使用最新的 Ubuntu 运行环境
    name: Deploy
    steps:
      - name: Checkout
        uses: actions/checkout@v4 # 第一步：拉取代码

      - name: Setup Node.js
        uses: actions/setup-node@v4 # 第二步：设置 Node.js 环境
        with:
          node-version: '20' # 使用 Node.js 20 版本

      - name: Install Dependencies
        run: |
          echo "📦 Installing dependencies..."
          # 检查是否存在package.json
          if [ -f "package.json" ]; then
            echo "Using package.json"
            npm install
          elif [ -f "workers-package.json" ]; then
            echo "Using workers-package.json"
            cp workers-package.json package.json
            npm install
          else
            echo "No package.json found, installing wrangler globally"
            npm install -g wrangler
          fi
        working-directory: ./backend

      - name: Verify Configuration
        run: |
          echo "🔍 Verifying wrangler configuration..."
          npx wrangler --version
          echo "📋 Configuration file content:"
          cat wrangler.toml
        working-directory: ./backend

      # 移除数据库迁移步骤，改为手动执行
      # 数据库迁移请使用: wrangler d1 execute destiny-db --file=./d1-schema.sql --remote

      - name: Deploy to Cloudflare Workers
        uses: cloudflare/wrangler-action@v3
        with:
          apiToken: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          accountId: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
          workingDirectory: 'backend'
          # 使用完整配置文件部署（包含Durable Objects和Queues）
          command: deploy

      - name: Verify Deployment
        run: |
          echo "🧪 Verifying deployment..."
          sleep 10  # 等待部署完全生效

          # 测试健康检查端点
          echo "📊 Testing health endpoint..."
          curl -f https://destiny-backend.rocky-liang.workers.dev/api/health || echo "Health check failed, but continuing..."

          # 测试异步状态端点
          echo "📊 Testing async status endpoint..."
          curl -f https://destiny-backend.rocky-liang.workers.dev/api/async-status || echo "Async status check failed, but continuing..."

          echo "✅ Deployment verification completed!"
